description: |-
  Calculation of various metrics over the data is the main part of Data Quality job. 
  Metrics allow evaluation of various indicators that describe data from both technical and business points of view. 
  Indicators in their turn can signal about problems in the data.
  
  Most of the metrics are linked to a source over which they are calculated. Most of the metrics are computed directly over
  the data source. Such metrics are called `regular`. Apart from regular metrics there are two special kinds of metrics:
  
    * `composed` metrics - can be calculated based on other metrics results thus allowing metric compositions.
    * `trend` metrics - calculated using historical results of lookup metric thus allowing to compute some statistics over
      historical metric results.
type: object
properties:
  regular:
    description: All regular metrics are grouped by their type within this section of the configuration.
    type: object
    properties: 
      rowCount:
        type: array
        description: |-
          Calculates number of rows in the source. This is the only metric for which columns list should 
          not be specified as it is not required to compute number of rows. Metric is not reversible 
          and cannot fail (might only return Error status in case of some runtime exception).
        items:
          $ref: 'metrics/rowCountMetricConfig.yaml'
      duplicateValues:
        type: array
        description: |-
          Counts number of duplicate values in provided columns. When applied to multiple columns, 
          number of duplicate tuples is returned. Metric is not reversible and fails only when duplicate value 
          (or tuple for multi-column definition) is found.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      distinctValues:
        type: array
        description: |-
          Counts number of unique values in provided columns. When applied to multiple columns, 
          total number of unique tuples is returned. Metric is not reversible and fails only when null value
          (or tuple) is found.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      approximateDistinctValues:
        type: array
        description: |-
          Calculates number of unique values approximately, using HyperLogLog algorithm.
          **This metric works with only one column.**
          Metric is not reversible and fails only if provided value cannot be cast to String.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/accuracyParamsConfig.yaml'
      nullValues:
        type: array
        description: |-
          Counts number of null values in the specified columns. When applied to multiple columns, 
          total number of null values in these columns is returned. Metric is reversible.
          **By default, reversed parameter is set to true, i.e. error collection logic is reversed by default.**
          For direct error collection logic, metric increment returns `Failure` status for rows where some values 
          in the specified columns are NON-null. For reversed error collection logic (default one), 
          metric increment returns `Failure` status when some values in the specified columns are null.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
      emptyValues:
        type: array
        description: |-
          Counts number of empty values in the specified columns (i.e. empty string values). When applied to 
          multiple columns, total number of empty values in these columns is returned. Metric is reversible. 
          **By default, reversed parameter is set to true, i.e. error collection logic is reversed by default.**
          For direct error collection logic, metric increment returns `Failure` status for rows where some values 
          in the specified columns are non-empty. For reversed error collection logic (default one), metric 
          increment returns `Failure` status when some values in the specified columns are empty.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
      completeness:
        type: array
        description: |-
          Calculates the measure of completeness in the specified columns: 
          `(values_count - null_count) / values_count`. When applied to multiple columns, 
          total number of values and total number of nulls are used in the equation above.
          **By default, reversed parameter is set to true, i.e. error collection logic is reversed by default.**
          For direct error collection logic, metric increment returns `Failure` status for rows where some values 
          in the specified columns are non-noll (or non-empty if `includeEmptyStrings` is set to `true`).
          For reversed error collection logic (default one), metric increment returns `Failure` status when some 
          values in the specified columns are null (or empty if `includeEmptyStrings` is set to `true`).
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/completenessParamsConfig.yaml'
      emptiness:
        type: array
        description: |-
          Calculates the measure of emptiness in the specified columns: `null_count / values_count`. When applied 
          to multiple columns, total number of values and total number of nulls are used in the equation above.
          **By default, reversed parameter is set to true, i.e. error collection logic is reversed by default.**
          For direct error collection logic, metric increment returns `Failure` status for rows where some values 
          in the specified columns are non-noll (or non-empty if `includeEmptyStrings` is set to `true`).
          For reversed error collection logic (default one), metric increment returns `Failure` status when some 
          values in the specified columns are null (or empty if `includeEmptyStrings` is set to `true`).
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/completenessParamsConfig.yaml'
      sequenceCompleteness:
        type: array
        description: |-
          Calculates measure of completeness of an incremental sequence of integers. In other words, it looks 
          for the missing elements in the sequence and returns the relation: 
          `actual number of elements / required number of elements`. The required number of elements is determined 
          by the formula: `(max_value - min_value) / increment + 1`, where: 
            * min_value - the minimum value in the sequence; 
            * max_value - the maximum value in the sequence; 
            * increment - sequence step, default is 1.
          **This metric works with only one column.**
          Metric is not reversible and fails only if provided column value cannot be cast to number.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/seqCompletenessParamsConfig.yaml'
      approximateSequenceCompleteness:
        type: array
        description: |-
          Calculates the measure of completeness of an incremental sequence of integers approximately using 
          the HyperLogLog algorithm. Works in the same way is Sequence Completeness Metric with only difference, 
          that actual number of elements in the sequence is determined approximately using HLL algorithm.
          **This metric works with only one column.**
          Metric is not reversible and fails only if provided column value cannot be cast to number.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/approxSeqCompletenessParamsConfig.yaml'
      minString:
        type: array
        description: |-
          Calculates the minimum string length in the values of the specified columns.
          Metric is not reversible. Metric increment returns `Failure` status for rows where all values in the 
          specified columns cannot be cast to string and, therefore, minimum string length cannot be computed.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      maxString:
        type: array
        description: |-
          Calculates the maximum string length in the values of the specified columns.
          Metric is not reversible. Metric increment returns `Failure` status for rows where all values in the 
          specified columns cannot be cast to string and, therefore, maximum string length cannot be computed.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      avgString:
        type: array
        description: |-
          Calculates the average string length in the values of the specified columns.
          Metric is not reversible. Metric increment returns `Failure` status for rows where all values in the 
          specified columns cannot be cast to string and, therefore, average string length cannot be computed.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      stringLength:
        type: array
        description: |-
          Calculate number of values that meet the defined string length criteria.
          Metric is reversible. For direct error collection logic, metric increment returns `Failure` status for 
          rows where some values in the specified columns do not meet defined string length criteria. For reversed
          error collection logic (default one), metric increment returns `Failure` status when some values in the 
          specified columns DO meet defined string length criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/stringLengthParamsConfig.yaml'
      stringInDomain:
        type: array
        description: |-
          Counts number of values which fall into specified set of allowed values.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not fall into set of allowed values.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns ARE IN set of allowed values.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/stringDomainParamsConfig.yaml'
      stringOutDomain:
        type: array
        description: |-
          Counts number of values which do **not** fall into specified set of avoided values.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns are in set of allowed values.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO NOT fall into set of allowed values.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/stringDomainParamsConfig.yaml'
      stringValues:
        type: array
        description: |-
          Counts number of values that are equal to the value given in metric definition.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not equal to defined compare value.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO equal to defined compare value.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/stringValuesParamsConfig.yaml'
      regexMatch:
        type: array
        description: |-
          Calculates number of values that match the defined regular expression.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not match defined regular expression.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO match defined regular expression.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/regexParamsConfig.yaml'
      regexMismatch:
        type: array
        description: |-
          Calculates number of values that do **not** match the defined regular expression.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns DO match defined regular expression.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns do not match defined regular expression.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/regexParamsConfig.yaml'
      formattedDate:
        type: array
        description: |-
          Counts number of values which have the specified datetime format.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not conform to defined datetime format.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO conform to defined datetime format.
          
          If the specified columns are of type `Timestamp`, it is assumed that they fit any datetime format and, 
          therefore,  metric will return the total number of non-empty cells. 
          Accordingly, the datetime format does not need to be specified.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/formattedDateParamsConfig.yaml'
      formattedNumber:
        type: array
        description: |-
          Counts number of values which are numeric and number format satisfy defined number format criteria.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not satisfy defined number format criteria.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO meet defined number format criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/formattedNumberParamsConfig.yaml'
      minNumber:
        type: array
        description: |-
          Finds minimum number from the values in the specified columns.
          Metrics is not reversible and increment returns `Failure` status for rows where all values in 
          the specified columns cannot be cast to number and, therefore, minimum number cannot be computed.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      maxNumber:
        type: array
        description: |-
          Finds maximum number from the values in the specified columns.
          Metrics is not reversible and increment returns `Failure` status for rows where all values in 
          the specified columns cannot be cast to number and, therefore, maximum number cannot be computed.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      sumNumber:
        type: array
        description: |-
          Finds sum of the values in the specified columns.
          Metrics is not reversible and increment returns `Failure` status for rows where some values in 
          the specified columns cannot be cast to number.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      avgNumber:
        type: array
        description: |-
          Finds average of the values in the specified column.
          Metrics is not reversible and increment returns `Failure` status for rows where some values in 
          the specified columns cannot be cast to number.
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      stdNumber:
        type: array
        description: |-
          Finds standard deviation for the values in the specified column.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cast to number. **This metric works with only one column.**
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      castedNumber:
        type: array
        description: |-
          Counts number of values which string value can be converted to a number (double).
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns cannot be cast to number.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns CAN be cast to number.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
      numberInDomain:
        type: array
        description: |-
          Counts number of values which being cast to number (double) fall into specified set of allowed numbers.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not fall into set of allowed numbers.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns ARE IN set of allowed numbers.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberDomainParamsConfig.yaml'
      numberOutDomain:
        type: array
        description: |-
          Counts number of values which being cast to number (double) do **not** fall into specified set of avoided numbers.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns are in set of allowed numbers.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns do not fall into set of allowed numbers.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberDomainParamsConfig.yaml'
      numberLessThan:
        type: array
        description: |-
          Counts number of values which being cast to number (double) are less than (or equal to) the specified value.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not satisfy the comparison criteria.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO MEET the comparison criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberCompareParamsConfig.yaml'
      numberGreaterThan:
        type: array
        description: |-
          Counts number of values which being cast to number (double) are greater than (or equal to) the specified value.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not satisfy the comparison criteria.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO MEET the comparison criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberCompareParamsConfig.yaml'
      numberBetween:
        type: array
        description: |-
          Counts number of values which being cast to number (double) are within the given interval.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not satisfy the comparison criteria.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO MEET the comparison criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberIntervalParamsConfig.yaml'
      numberNotBetween:
        type: array
        description: |-
          Counts number of values which being cast to number (double) are outside the given interval.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not satisfy the comparison criteria.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO MEET the comparison criteria.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberIntervalParamsConfig.yaml'
      numberValues:
        type: array
        description: |-
          Counts number of values which being cast to number (double) are equal to the number given in metric definition.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not equal to defined compare value.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns DO equal to defined compare value.
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/numberValuesParamsConfig.yaml'
      medianValue:
        type: array
        description: |-
          Calculates median value of the values in the specified column. Metric calculator uses 
          [TDigest](https://github.com/isarn/isarn-sketches) library for computation of median value.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cannot be cast to number. **This metric works with only one column.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/accuracyParamsConfig.yaml'
      firstQuantile:
        type: array
        description: |-
          Calculates first quantile for the values in the specified column. Metric calculator uses
          [TDigest](https://github.com/isarn/isarn-sketches) library for computation of first quantile.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cannot be cast to number. **This metric works with only one column.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/accuracyParamsConfig.yaml'
      thirdQuantile:
        type: array
        description: |-
          Calculates third quantile for the values in the specified column. Metric calculator uses
          [TDigest](https://github.com/isarn/isarn-sketches) library for computation of third quantile.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cannot be cast to number. **This metric works with only one column.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/accuracyParamsConfig.yaml'
      getQuantile:
        type: array
        description: |-
          Calculates an arbitrary quantile for the values in the specified column. Metric calculator uses
          [TDigest](https://github.com/isarn/isarn-sketches) library for computation of quantile.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cannot be cast to number. **This metric works with only one column.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/getQuantileParamsConfig.yaml'
      getPercentile:
        type: array
        description: |-
          This metric is inverse of `getQuantile` metric. It calculates a percentile value
          (quantile in %) which corresponds to the specified number from the set of values in the column.
          Metric calculator uses [TDigest](https://github.com/isarn/isarn-sketches) library for computation of percentile value.
          Metric is not reversible and metric increment returns `Failure` status for rows where value in 
          the specified column cannot be cast to number. **This metric works with only one column.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/getPercentileParamsConfig.yaml'
      columnEq:
        type: array
        description: |-
          Calculates the number of rows where values in the specified columns are equal to each other.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns cannot be cast to string or are not equal
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns cannot be cast to string or ARE equal.
          **This metric works with at least two columns.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
      dayDistance:
        type: array
        description: |-
          Calculates the number of rows where difference between date in two columns expressed in terms of days is less
          (strictly less) than the specified threshold value.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns do not conform to the specified datetime format or when date difference in days
          is greater than or equal to specified threshold.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns do not conform to the specified datetime format or when date difference in days
          is lower than specified threshold.
          **This metric works with exactly two columns.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/dayDistanceParamsConfig.yaml'        
      levenshteinDistance:
        type: array
        description: |-
          Calculates number of rows where Levenshtein distance between string values in the provided columns 
          is less than (strictly less) specified threshold.
          Metric is reversible.
          For direct error collection logic, metric increment returns `Failure` status for rows where some values in
          the specified columns cannot be cast to string or when Levenshtein distance is greater than or equal to
          specified threshold.
          For reversed error collection logic (default one), metric increment returns `Failure` status when some values
          in the specified columns cannot be cast to string or when Levenshtein distance is lower than specified threshold.
          **This metric works with exactly two columns.**
        items:
          allOf:
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/reversedMetricConfig.yaml'
            - $ref: 'metrics/levenshteinDistanceParamsConfig.yaml'
      coMoment:
        type: array
        description: |-
          Calculates the covariance moment of the values in two columns (co-moment).
          Metric is not reversible and metric increment returns `Failure` status for rows where some values 
          in the specified columns cannot be cast to number. **This metric works with exactly two columns.**
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      covariance:
        type: array
        description: |-
          Calculates the covariance of the values in two columns.
          Metric is not reversible and metric increment returns `Failure` status for rows where some values 
          in the specified columns cannot be cast to number. **This metric works with exactly two columns.**
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      covarianceBessel:
        type: array
        description: |-
          Calculates the covariance of the values in two columns with the Bessel correction.
          Metric is not reversible and metric increment returns `Failure` status for rows where some values 
          in the specified columns cannot be cast to number. **This metric works with exactly two columns.**
        items:
          $ref: 'metrics/baseRegularMetricConfig.yaml'
      topN:
        type: array
        description: |-
          This is a specific metric that calculates approximate N most frequently occurring values in a column.
          The metric calculator uses [Twitter Algebird](https://github.com/twitter/algebird) library,
          which implements abstract algebra methods for Scala.
          Metric is not reversible and metric increment returns `Failure` status for rows where some values in
          the specified columns cannot be cast to string. **This metric works with only one column.**
        items:
          allOf: 
            - $ref: 'metrics/baseRegularMetricConfig.yaml'
            - $ref: 'metrics/topNParamsConfig.yaml'
  composed:
    description: |-
      Composed metrics are defined using a formula (arithmetic expression specified in the formula field) 
      for their calculation. As composed metric are intended for using other metric results to compute
      a derivative result then, these metrics can be referenced in the formula by their IDs.

      Formula must be written using Mustache Template notation, e.g.: `{{ metric_1 }} + {{ metic_2 }}`.

      There are following operations supported to build arithmetic expressions:

      * Basic `+-*/` and exponentiation `^` math operations.
      * Grouping using parentheses.
      * Mathematical functions of single argument: `abs`, `sqrt`, `floor`, `ceil`, `round` (rounds to the closest integer), 
        `ln` (natural logarithm), `lg` (decimal logarithm), `exp`.
      * Mathematical functions of two arguments: `max` and `min`.
    type: array
    items:
      $ref: 'metrics/composedMetricConfig.yaml'
  trend:
    description: |-
      Trend metrics allows computing statistic over historical metric results and are primarily intended to 
      detect anomalies in the data. In order to compute statistic over historical metric results it is required 
      to define a lookup metric which results are pulled from DQ storage and also a time window for which 
      to compute the desired statistic.
    type: array
    items:
      $ref: 'metrics/trendMetricConfig.yaml'